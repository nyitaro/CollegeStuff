/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * FourthQuestion.java
 *
 * Created on 15-Dec-2011, 14:48:51
 */

package implementation;

/**
 *
 * @author aa27927
 */
public class FourthQuestion extends javax.swing.JFrame {
    Main main;
    int bads = 0;
    private javax.swing.JLabel dragndrop;
    java.awt.Toolkit tk = this.getToolkit();
    java.awt.Image answer1Cursor = tk.getImage("ThirdQuest5v.png");
    java.awt.Image answer2Cursor = tk.getImage("ThirdQuest10v.png");
    java.awt.Image answer3Cursor = tk.getImage("ThirdQuest15v.png");
    java.awt.Image answer4Cursor = tk.getImage("ThirdQuest20v.png");
    java.awt.Image answer5Cursor = tk.getImage("ThirdQuest25v.png");
    java.awt.Image answer6Cursor = tk.getImage("ThirdQuest30v.png");
    java.awt.Image answer7Cursor = tk.getImage("ThirdQuest35v.png");
    java.awt.Cursor mouse1 = tk.createCustomCursor(answer1Cursor, new java.awt.Point(0, 0), "1");
    java.awt.Cursor mouse2 = tk.createCustomCursor(answer2Cursor, new java.awt.Point(0, 0), "2");
    java.awt.Cursor mouse3 = tk.createCustomCursor(answer3Cursor, new java.awt.Point(0, 0), "3");
    java.awt.Cursor mouse4 = tk.createCustomCursor(answer4Cursor, new java.awt.Point(0, 0), "4");
    java.awt.Cursor mouse5 = tk.createCustomCursor(answer5Cursor, new java.awt.Point(0, 0), "5");
    java.awt.Cursor mouse6 = tk.createCustomCursor(answer6Cursor, new java.awt.Point(0, 0), "6");
    java.awt.Cursor mouse7 = tk.createCustomCursor(answer7Cursor, new java.awt.Point(0, 0), "7");
    int i = 0;

    /** Creates new form FourthQuestion */
    public FourthQuestion(Main m) {
        main = m;
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLayeredPane2 = new javax.swing.JLayeredPane();
        mainpanel = new javax.swing.JPanel();
        heading = new javax.swing.JLabel();
        ThirdQuestionbasepane = new javax.swing.JPanel();
        ThirdQuestCircuit = new javax.swing.JPanel();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        dropingarea = new javax.swing.JTextField();
        iconlbl = new javax.swing.JLabel();
        resultlbl = new javax.swing.JLabel();
        dsiplaytxt = new javax.swing.JTextField();
        Options = new javax.swing.JPanel();
        watts2 = new javax.swing.JLabel();
        watts4 = new javax.swing.JLabel();
        watts5000 = new javax.swing.JLabel();
        watts010 = new javax.swing.JLabel();
        watts60 = new javax.swing.JLabel();
        watss100 = new javax.swing.JLabel();
        watts96 = new javax.swing.JLabel();
        questionlbl = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        btntoscore = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        heading.setFont(new java.awt.Font("Tahoma", 1, 14));
        heading.setText("       Fourth Question");

        ThirdQuestionbasepane.setBorder(javax.swing.BorderFactory.createTitledBorder("basepane"));

        ThirdQuestCircuit.setBackground(java.awt.Color.white);
        ThirdQuestCircuit.setBorder(javax.swing.BorderFactory.createTitledBorder("Circuit"));
        ThirdQuestCircuit.setLayout(null);

        dropingarea.setEditable(false);
        dropingarea.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                dropingareaMouseReleased(evt);
            }
        });
        dropingarea.setBounds(400, 220, 80, 40);
        jLayeredPane1.add(dropingarea, javax.swing.JLayeredPane.PALETTE_LAYER);

        iconlbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/implementation/seconddragndropquestion.jpg"))); // NOI18N
        iconlbl.setBounds(0, 0, 610, 450);
        jLayeredPane1.add(iconlbl, javax.swing.JLayeredPane.DEFAULT_LAYER);

        ThirdQuestCircuit.add(jLayeredPane1);
        jLayeredPane1.setBounds(8, 10, 610, 410);

        resultlbl.setText("Result :");
        ThirdQuestCircuit.add(resultlbl);
        resultlbl.setBounds(20, 440, 50, 30);

        dsiplaytxt.setEditable(false);
        ThirdQuestCircuit.add(dsiplaytxt);
        dsiplaytxt.setBounds(70, 440, 430, 30);

        Options.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder("Options")));

        watts2.setText("       2 Watts");
        watts2.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED, new java.awt.Color(204, 0, 0), java.awt.Color.gray));
        watts2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                watts2MousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                watts2MouseReleased(evt);
            }
        });

        watts4.setText("        4 Watts");
        watts4.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED, new java.awt.Color(204, 0, 0), java.awt.Color.gray));
        watts4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                watts4MousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                watts4MouseReleased(evt);
            }
        });

        watts5000.setText("        5000 Watts");
        watts5000.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED, new java.awt.Color(204, 0, 0), java.awt.Color.gray));
        watts5000.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                watts5000MousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                watts5000MouseReleased(evt);
            }
        });

        watts010.setText("         0.10 Watts");
        watts010.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED, new java.awt.Color(204, 0, 0), java.awt.Color.gray));
        watts010.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                watts010MousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                watts010MouseReleased(evt);
            }
        });

        watts60.setText("       60 Watts");
        watts60.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED, new java.awt.Color(204, 0, 0), java.awt.Color.gray));
        watts60.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                watts60MousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                watts60MouseReleased(evt);
            }
        });

        watss100.setText("        100 Watts");
        watss100.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED, new java.awt.Color(204, 0, 0), java.awt.Color.gray));
        watss100.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                watss100MousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                watss100MouseReleased(evt);
            }
        });

        watts96.setText("       96 Watts");
        watts96.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED, new java.awt.Color(204, 0, 0), java.awt.Color.gray));
        watts96.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                watts96MousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                watts96MouseReleased(evt);
            }
        });

        javax.swing.GroupLayout OptionsLayout = new javax.swing.GroupLayout(Options);
        Options.setLayout(OptionsLayout);
        OptionsLayout.setHorizontalGroup(
            OptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(OptionsLayout.createSequentialGroup()
                .addGroup(OptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(watts4, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(watts5000, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(watts010, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(watts60, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(watss100, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(watts96, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(watts2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        OptionsLayout.setVerticalGroup(
            OptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(OptionsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(watts2, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(watts4, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(watts5000, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(watts010, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(watts60, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(watss100, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(watts96, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout ThirdQuestionbasepaneLayout = new javax.swing.GroupLayout(ThirdQuestionbasepane);
        ThirdQuestionbasepane.setLayout(ThirdQuestionbasepaneLayout);
        ThirdQuestionbasepaneLayout.setHorizontalGroup(
            ThirdQuestionbasepaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ThirdQuestionbasepaneLayout.createSequentialGroup()
                .addComponent(Options, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ThirdQuestCircuit, javax.swing.GroupLayout.PREFERRED_SIZE, 620, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        ThirdQuestionbasepaneLayout.setVerticalGroup(
            ThirdQuestionbasepaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ThirdQuestCircuit, javax.swing.GroupLayout.DEFAULT_SIZE, 479, Short.MAX_VALUE)
            .addComponent(Options, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        questionlbl.setBorder(javax.swing.BorderFactory.createTitledBorder("Question"));

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setText("When plugged into a 120-Volt outlet, a light bulb consumes 300 joules of energy over a 5 second\ntime period. Find the power of the light bulb in Watts.");
        jTextArea1.setAutoscrolls(false);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout questionlblLayout = new javax.swing.GroupLayout(questionlbl);
        questionlbl.setLayout(questionlblLayout);
        questionlblLayout.setHorizontalGroup(
            questionlblLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(questionlblLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 790, Short.MAX_VALUE)
                .addContainerGap())
        );
        questionlblLayout.setVerticalGroup(
            questionlblLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(questionlblLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout mainpanelLayout = new javax.swing.GroupLayout(mainpanel);
        mainpanel.setLayout(mainpanelLayout);
        mainpanelLayout.setHorizontalGroup(
            mainpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainpanelLayout.createSequentialGroup()
                .addGroup(mainpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ThirdQuestionbasepane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(mainpanelLayout.createSequentialGroup()
                        .addGap(323, 323, 323)
                        .addComponent(heading, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(mainpanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(questionlbl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        mainpanelLayout.setVerticalGroup(
            mainpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainpanelLayout.createSequentialGroup()
                .addComponent(heading, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(ThirdQuestionbasepane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(questionlbl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btntoscore.setText("Score");
        btntoscore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btntoscoreActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(mainpanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btntoscore)
                        .addGap(22, 22, 22))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainpanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btntoscore))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void dropingareaMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dropingareaMouseEntered
        if(i == 3){
            dropingarea.setText("30v");
            dsiplaytxt.setText("Correct");
        }
}//GEN-LAST:event_dropingareaMouseEntered

    private void dropingareaMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dropingareaMouseReleased
        // TODO add your handling code here:
}//GEN-LAST:event_dropingareaMouseReleased
    /**
     * When you click on each different labels, It will change the cursor into the assigned image in relation to that label.
     * @param evt
     */
    private void watts2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_watts2MousePressed
        // TODO add your handling code here:
        dragndrop = watts2;
        setCursor(mouse1);
        dropingarea.setText(null);
}//GEN-LAST:event_watts2MousePressed
    /**
     * finds the location of the dropzon in relation to the screen as that is how mouse coordinate works
     * then checks if the mouse is in the dropzone. if it is, it "drops" the text, since this is wrong, it will set the text on display
      * to "Wrong".
     * sets the component being dragged back to null
     * and sets the cursor back to default
     * @param evt
     */
    private void watts2MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_watts2MouseReleased
        long x = dropingarea.getX() + jLayeredPane1.getX() + ThirdQuestCircuit.getX() + ThirdQuestionbasepane.getX() + mainpanel.getX() + this.getX();
        long y = dropingarea.getY() + jLayeredPane1.getY() + ThirdQuestCircuit.getY() + ThirdQuestionbasepane.getY() + mainpanel.getY() + this.getY();
        if(getMousePosition().x > x && getMousePosition().x < x + dropingarea.getWidth() &&
                getMousePosition().y > y && getMousePosition().y < y + dropingarea.getHeight() ) {
            dropingarea.setText(dragndrop.getText());
            dsiplaytxt.setText("Wrong");
            bads += 1;
        }
        dragndrop = null;
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

}//GEN-LAST:event_watts2MouseReleased
    /**
     * When you click on each different labels, It will change the cursor into the assigned image in relation to that label.
     * @param evt
     */
    private void watts4MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_watts4MousePressed
       
        dragndrop = watts4;
        setCursor(mouse2);
        dropingarea.setText(null);
}//GEN-LAST:event_watts4MousePressed
    /**
     * finds the location of the dropzon in relation to the screen as that is how mouse coordinate works
     * then checks if the mouse is in the dropzone. if it is, it "drops" the text, since this is wrong, it will set the text on display
      * to "Wrong".
     * sets the component being dragged back to null
     * and sets the cursor back to default
     * @param evt
     */
    private void watts4MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_watts4MouseReleased
        long x = dropingarea.getX() + jLayeredPane1.getX() + ThirdQuestCircuit.getX() + ThirdQuestionbasepane.getX() + mainpanel.getX() + this.getX();
        long y = dropingarea.getY() + jLayeredPane1.getY() + ThirdQuestCircuit.getY() + ThirdQuestionbasepane.getY() + mainpanel.getY() + this.getY();
        if(getMousePosition().x > x && getMousePosition().x < x + dropingarea.getWidth() &&
                getMousePosition().y > y && getMousePosition().y < y + dropingarea.getHeight() ) {
            dropingarea.setText(dragndrop.getText());
            dsiplaytxt.setText("Wrong");
            bads += 1;
        }
        dragndrop = null;
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
}//GEN-LAST:event_watts4MouseReleased
    /**
     * When you click on each different labels, It will change the cursor into the assigned image in relation to that label.
     * @param evt
     */
    private void watts5000MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_watts5000MousePressed
        // TODO add your handling code here:
        dragndrop = watts5000;
        setCursor(mouse3);
        dropingarea.setText(null);
}//GEN-LAST:event_watts5000MousePressed
    /**
     * finds the location of the dropzon in relation to the screen as that is how mouse coordinate works
     * then checks if the mouse is in the dropzone. if it is, it "drops" the text, since this is wrong, it will set the text on display
      * to "Wrong".
     * sets the component being dragged back to null
     * and sets the cursor back to default
     * @param evt
     */
    private void watts5000MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_watts5000MouseReleased
        long x = dropingarea.getX() + jLayeredPane1.getX() + ThirdQuestCircuit.getX() + ThirdQuestionbasepane.getX() + mainpanel.getX() + this.getX();
        long y = dropingarea.getY() + jLayeredPane1.getY() + ThirdQuestCircuit.getY() + ThirdQuestionbasepane.getY() + mainpanel.getY() + this.getY();
        if(getMousePosition().x > x && getMousePosition().x < x + dropingarea.getWidth() &&
                getMousePosition().y > y && getMousePosition().y < y + dropingarea.getHeight() ) {
            dropingarea.setText(dragndrop.getText());
            dsiplaytxt.setText("Wrong");
            bads += 1;
        }
        dragndrop = null;
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
}//GEN-LAST:event_watts5000MouseReleased
    /**
     * When you click on each different labels, It will change the cursor into the assigned image in relation to that label.
     * @param evt
     */
    private void watts010MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_watts010MousePressed
        // TODO add your handling code here:
        dragndrop = watts010;
        setCursor(mouse4);
        dropingarea.setText(null);
}//GEN-LAST:event_watts010MousePressed
    /**
     * finds the location of the dropzon in relation to the screen as that is how mouse coordinate works
     * then checks if the mouse is in the dropzone. if it is, it "drops" the text, since this is wrong, it will set the text on display
      * to "Wrong".
     * sets the component being dragged back to null
     * and sets the cursor back to default
     * @param evt
     */
    private void watts010MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_watts010MouseReleased
        long x = dropingarea.getX() + jLayeredPane1.getX() + ThirdQuestCircuit.getX() + ThirdQuestionbasepane.getX() + mainpanel.getX() + this.getX();
        long y = dropingarea.getY() + jLayeredPane1.getY() + ThirdQuestCircuit.getY() + ThirdQuestionbasepane.getY() + mainpanel.getY() + this.getY();
        if(getMousePosition().x > x && getMousePosition().x < x + dropingarea.getWidth() &&
                getMousePosition().y > y && getMousePosition().y < y + dropingarea.getHeight() ) {
            dropingarea.setText(dragndrop.getText());
            dsiplaytxt.setText("Wrong");
            bads += 1;
        }
        dragndrop = null;
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
}//GEN-LAST:event_watts010MouseReleased
    /**
     * When you click on each different labels, It will change the cursor into the assigned image in relation to that label.
     * @param evt
     */
    private void watts60MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_watts60MousePressed
        // TODO add your handling code here:
        dragndrop = watts60;
        setCursor(mouse5);
        dropingarea.setText(null);
}//GEN-LAST:event_watts60MousePressed
    /**
     * finds the location of the dropzon in relation to the screen as that is how mouse coordinate works
     * then checks if the mouse is in the dropzone. if it is, it "drops" the text, since this is wrong, it will set the text on display
      * to "Wrong".
     * sets the component being dragged back to null
     * and sets the cursor back to default
     * @param evt
     */
    private void watts60MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_watts60MouseReleased
        long x = dropingarea.getX() + jLayeredPane1.getX() + ThirdQuestCircuit.getX() + ThirdQuestionbasepane.getX() + mainpanel.getX() + this.getX();
        long y = dropingarea.getY() + jLayeredPane1.getY() + ThirdQuestCircuit.getY() + ThirdQuestionbasepane.getY() + mainpanel.getY() + this.getY();
        if(getMousePosition().x > x && getMousePosition().x < x + dropingarea.getWidth() &&
                getMousePosition().y > y && getMousePosition().y < y + dropingarea.getHeight() ) {
            dropingarea.setText(dragndrop.getText());
            dsiplaytxt.setText("Good job, That's correct. P = (300 J) / (5 seconds) = 60 Watts");
            //If they got it right in less than 2 clicks, 4 will be added to the current score
            if( bads < 2){
                main.score += 4;
            }
        }
        dragndrop = null;
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
}//GEN-LAST:event_watts60MouseReleased
    /**
     * When you click on each different labels, It will change the cursor into the assigned image in relation to that label.
     * @param evt
     */
    private void watss100MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_watss100MousePressed
        // TODO add your handling code here:
        dragndrop = watss100;
        setCursor(mouse6);
        dropingarea.setText(null);
}//GEN-LAST:event_watss100MousePressed
    /**
     * finds the location of the dropzon in relation to the screen as that is how mouse coordinate works
     * then checks if the mouse is in the dropzone. if it is, it "drops" the text, since this is wrong, it will set the text on display
      * to "Wrong".
     * sets the component being dragged back to null
     * and sets the cursor back to default
     * @param evt
     */
    private void watss100MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_watss100MouseReleased
        long x = dropingarea.getX() + jLayeredPane1.getX() + ThirdQuestCircuit.getX() + ThirdQuestionbasepane.getX() + mainpanel.getX() + this.getX();
        long y = dropingarea.getY() + jLayeredPane1.getY() + ThirdQuestCircuit.getY() + ThirdQuestionbasepane.getY() + mainpanel.getY() + this.getY();
        if(getMousePosition().x > x && getMousePosition().x < x + dropingarea.getWidth() &&
                getMousePosition().y > y && getMousePosition().y < y + dropingarea.getHeight() ) {
            dropingarea.setText(dragndrop.getText());
            dsiplaytxt.setText("Wrong");
            bads += 1;
        }
        dragndrop = null;
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
}//GEN-LAST:event_watss100MouseReleased
    /**
     * When you click on each different labels, It will change the cursor into the assigned image in relation to that label.
     * @param evt
     */
    private void watts96MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_watts96MousePressed
        // TODO add your handling code here:
        dragndrop = watts96;
        setCursor(mouse7);
        dropingarea.setText(null);
}//GEN-LAST:event_watts96MousePressed
    /**
     * finds the location of the dropzon in relation to the screen as that is how mouse coordinate works
     * then checks if the mouse is in the dropzone. if it is, it "drops" the text, since this is wrong, it will set the text on display
      * to "Wrong".
     * sets the component being dragged back to null
     * and sets the cursor back to default
     * @param evt
     */
    private void watts96MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_watts96MouseReleased
        long x = dropingarea.getX() + jLayeredPane1.getX() + ThirdQuestCircuit.getX() + ThirdQuestionbasepane.getX() + mainpanel.getX() + this.getX();
        long y = dropingarea.getY() + jLayeredPane1.getY() + ThirdQuestCircuit.getY() + ThirdQuestionbasepane.getY() + mainpanel.getY() + this.getY();
        if(getMousePosition().x > x && getMousePosition().x < x + dropingarea.getWidth() &&
                getMousePosition().y > y && getMousePosition().y < y + dropingarea.getHeight() ) {
            dropingarea.setText(dragndrop.getText());
            dsiplaytxt.setText("Wrong");
            bads += 1;
        }

        dragndrop = null;
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
}//GEN-LAST:event_watts96MouseReleased
    
    private void btntoscoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btntoscoreActionPerformed
        // This will check if the text in displaytxt is same as ''Good job, That's correct. P = (300 J) / (5 seconds) = 60 Watts''
        // and if it is, it will enable the button to go to the ScorePage and open it and will close this current page.
        if(dsiplaytxt.getText().equals("Good job, That's correct. P = (300 J) / (5 seconds) = 60 Watts")){
            new ScorePage(main).setVisible(true);
            this.dispose();
        }
    }//GEN-LAST:event_btntoscoreActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Options;
    private javax.swing.JPanel ThirdQuestCircuit;
    private javax.swing.JPanel ThirdQuestionbasepane;
    private javax.swing.JButton btntoscore;
    private javax.swing.JTextField dropingarea;
    private javax.swing.JTextField dsiplaytxt;
    private javax.swing.JLabel heading;
    private javax.swing.JLabel iconlbl;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JLayeredPane jLayeredPane2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JPanel mainpanel;
    private javax.swing.JPanel questionlbl;
    private javax.swing.JLabel resultlbl;
    private javax.swing.JLabel watss100;
    private javax.swing.JLabel watts010;
    private javax.swing.JLabel watts2;
    private javax.swing.JLabel watts4;
    private javax.swing.JLabel watts5000;
    private javax.swing.JLabel watts60;
    private javax.swing.JLabel watts96;
    // End of variables declaration//GEN-END:variables

}
